{"ast":null,"code":"var _jsxFileName = \"/Users/shelvymurphy-brown/Desktop/spotify-react/client/src/components/PlaySong.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport SpotifyPlayer from 'react-spotify-web-playback';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaySong = _ref => {\n  _s();\n\n  let {\n    accessToken,\n    trackUri\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    uris: trackUri ? [trackUri] : [],\n    play: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaySong, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = PlaySong;\nexport default PlaySong;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaySong\");","map":{"version":3,"sources":["/Users/shelvymurphy-brown/Desktop/spotify-react/client/src/components/PlaySong.js"],"names":["React","SpotifyPlayer","PlaySong","accessToken","trackUri","play","setPlay","useState","useEffect","state","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;AAEA,MAAMC,QAAQ,GAAG,QAA+B;AAAA;;AAAA,MAA9B;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAA8B;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMF,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AAEA,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACE,QAAC,aAAD;AACA,IAAA,KAAK,EAAEA,WADP;AAEA,IAAA,YAAY,MAFZ;AAEa,IAAA,IAAI,EAAEC,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB,EAF3C;AAGA,IAAA,IAAI,EAAE,IAHN;AAIA,IAAA,QAAQ,EAAEK,KAAK,IAAG;AAAE,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBJ,OAAO,CAAC,KAAD,CAAP;AAAe;AAJzD;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAbD;;GAAMJ,Q;;KAAAA,Q;AAeN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport SpotifyPlayer from 'react-spotify-web-playback'\n\nconst PlaySong = ({ accessToken, trackUri }) => {\n  const [play, setPlay] = useState(false)\n  \n  useEffect(() => setPlay(true), [trackUri])\n  \n  if (!accessToken) return null  \n  return (\n    <SpotifyPlayer \n    token={accessToken} \n    showSaveIcon uris={trackUri ? [trackUri] : []} \n    play={true} \n    callback={state =>{ if (!state.isPlaying) setPlay(false)}} />\n  )\n}\n\nexport default PlaySong;\n"]},"metadata":{},"sourceType":"module"}