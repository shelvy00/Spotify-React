{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport ClickOutside from './ClickOutside';\nimport DevicesIcon from './icons/Devices';\nimport { px, styled } from '../styles';\nvar Wrapper = styled('div')({\n  'pointer-events': 'all',\n  position: 'relative',\n  zIndex: 20,\n  '> div': {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: px(8),\n    position: 'absolute',\n    right: \"-\".concat(px(3)),\n    button: {\n      display: 'block',\n      padding: px(8),\n      whiteSpace: 'nowrap',\n      '&.rswp__devices__active': {\n        fontWeight: 'bold'\n      }\n    }\n  },\n  '> button': {\n    fontSize: px(26)\n  }\n}, function (_a) {\n  var _b;\n\n  var style = _a.style;\n  return {\n    '> button': {\n      color: style.c\n    },\n    '> div': (_b = {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? \"1px 1px 10px \".concat(style.altColor) : 'none'\n    }, _b[style.p] = '120%', _b.button = {\n      color: style.c\n    }, _b)\n  };\n}, 'DevicesRSWP');\n\nvar Devices =\n/** @class */\nfunction (_super) {\n  __extends(Devices, _super);\n\n  function Devices(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleClickSetDevice = function (event) {\n      var onClickDevice = _this.props.onClickDevice;\n      var dataset = event.currentTarget.dataset;\n      /* istanbul ignore else */\n\n      if (dataset.id) {\n        onClickDevice(dataset.id);\n\n        _this.setState({\n          isOpen: false\n        });\n      }\n    };\n\n    _this.handleClickToggleDevices = function () {\n      _this.setState(function (state) {\n        return {\n          isOpen: !state.isOpen\n        };\n      });\n    };\n\n    _this.state = {\n      isOpen: props.open\n    };\n    return _this;\n  }\n\n  Devices.prototype.render = function () {\n    var _this = this;\n\n    var isOpen = this.state.isOpen;\n    var _a = this.props,\n        currentDeviceId = _a.currentDeviceId,\n        deviceId = _a.deviceId,\n        devices = _a.devices,\n        playerPosition = _a.playerPosition,\n        _b = _a.styles,\n        activeColor = _b.activeColor,\n        altColor = _b.altColor,\n        bgColor = _b.bgColor,\n        color = _b.color,\n        title = _a.title;\n    return React.createElement(Wrapper, {\n      style: {\n        altColor: altColor,\n        bgColor: bgColor,\n        c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,\n        p: playerPosition\n      }\n    }, !!devices.length && React.createElement(React.Fragment, null, isOpen && React.createElement(ClickOutside, {\n      onClick: this.handleClickToggleDevices\n    }, devices.map(function (d) {\n      return React.createElement(\"button\", {\n        key: d.id,\n        className: d.id === currentDeviceId ? 'rswp__devices__active' : undefined,\n        \"data-id\": d.id,\n        onClick: _this.handleClickSetDevice,\n        type: \"button\"\n      }, d.name);\n    })), React.createElement(\"button\", {\n      \"aria-label\": title,\n      onClick: this.handleClickToggleDevices,\n      title: title,\n      type: \"button\"\n    }, React.createElement(DevicesIcon, null))));\n  };\n\n  return Devices;\n}(React.PureComponent);\n\nexport default Devices;","map":{"version":3,"mappings":"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","names":["React","ClickOutside","DevicesIcon","px","styled","Wrapper","position","zIndex","display","flexDirection","padding","right","button","whiteSpace","fontWeight","fontSize","_a","style","color","c","_b","backgroundColor","bgColor","boxShadow","altColor","p","__extends","props","_super","_this","event","onClickDevice","currentTarget","dataset","id","setState","isOpen","state","open","Devices","currentDeviceId","deviceId","devices","playerPosition","activeColor","title","length","onClick","handleClickToggleDevices","map","d","key","className","undefined","handleClickSetDevice","type","name","PureComponent"],"sources":["/Users/shelvymurphy-brown/Desktop/spotify-react/client/node_modules/react-spotify-web-playback/src/components/Devices.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport ClickOutside from './ClickOutside';\nimport DevicesIcon from './icons/Devices';\n\nimport { px, styled } from '../styles';\nimport { StyledProps, StylesOptions } from '../types/common';\nimport { SpotifyDevice } from '../types/spotify';\n\ninterface Props {\n  currentDeviceId?: string;\n  deviceId?: string;\n  devices: SpotifyDevice[];\n  onClickDevice: (deviceId: string) => any;\n  open: boolean;\n  playerPosition: string;\n  styles: StylesOptions;\n  title: string;\n}\n\nexport interface State {\n  isOpen: boolean;\n}\n\nconst Wrapper = styled('div')(\n  {\n    'pointer-events': 'all',\n    position: 'relative',\n    zIndex: 20,\n\n    '> div': {\n      display: 'flex',\n      flexDirection: 'column',\n      padding: px(8),\n      position: 'absolute',\n      right: `-${px(3)}`,\n\n      button: {\n        display: 'block',\n        padding: px(8),\n        whiteSpace: 'nowrap',\n\n        '&.rswp__devices__active': {\n          fontWeight: 'bold',\n        },\n      },\n    },\n\n    '> button': {\n      fontSize: px(26),\n    },\n  },\n  ({ style }: StyledProps) => ({\n    '> button': {\n      color: style.c,\n    },\n    '> div': {\n      backgroundColor: style.bgColor,\n      boxShadow: style.altColor ? `1px 1px 10px ${style.altColor}` : 'none',\n      [style.p]: '120%',\n      button: {\n        color: style.c,\n      },\n    },\n  }),\n  'DevicesRSWP',\n);\n\nexport default class Devices extends React.PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isOpen: props.open,\n    };\n  }\n\n  private handleClickSetDevice = (event: React.MouseEvent<HTMLElement>) => {\n    const { onClickDevice } = this.props;\n    const { dataset } = event.currentTarget;\n\n    /* istanbul ignore else */\n    if (dataset.id) {\n      onClickDevice(dataset.id);\n\n      this.setState({ isOpen: false });\n    }\n  };\n\n  private handleClickToggleDevices = () => {\n    this.setState(state => ({ isOpen: !state.isOpen }));\n  };\n\n  public render() {\n    const { isOpen } = this.state;\n    const {\n      currentDeviceId,\n      deviceId,\n      devices,\n      playerPosition,\n      styles: { activeColor, altColor, bgColor, color },\n      title,\n    } = this.props;\n\n    return (\n      <Wrapper\n        style={{\n          altColor,\n          bgColor,\n          c: currentDeviceId && deviceId && currentDeviceId !== deviceId ? activeColor : color,\n          p: playerPosition,\n        }}\n      >\n        {!!devices.length && (\n          <>\n            {isOpen && (\n              <ClickOutside onClick={this.handleClickToggleDevices}>\n                {devices.map((d: SpotifyDevice) => (\n                  <button\n                    key={d.id}\n                    className={d.id === currentDeviceId ? 'rswp__devices__active' : undefined}\n                    data-id={d.id}\n                    onClick={this.handleClickSetDevice}\n                    type=\"button\"\n                  >\n                    {d.name}\n                  </button>\n                ))}\n              </ClickOutside>\n            )}\n            <button\n              aria-label={title}\n              onClick={this.handleClickToggleDevices}\n              title={title}\n              type=\"button\"\n            >\n              <DevicesIcon />\n            </button>\n          </>\n        )}\n      </Wrapper>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}