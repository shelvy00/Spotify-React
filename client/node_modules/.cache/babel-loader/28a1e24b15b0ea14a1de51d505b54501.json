{"ast":null,"code":"import { isPlainObject } from 'is-plain-object';\n/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\n\nfunction getObjectType(object) {\n  if (typeof object !== \"object\" || object === null) {\n    return 0\n    /* NOT */\n    ;\n  }\n\n  if (Array.isArray(object)) {\n    return 2\n    /* ARRAY */\n    ;\n  }\n\n  if (isPlainObject(object)) {\n    return 1\n    /* RECORD */\n    ;\n  }\n\n  if (object instanceof Set) {\n    return 3\n    /* SET */\n    ;\n  }\n\n  if (object instanceof Map) {\n    return 4\n    /* MAP */\n    ;\n  }\n\n  return 5\n  /* OTHER */\n  ;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\n\n\nfunction getKeys(objects) {\n  const keys = new Set();\n  /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n\n  for (const object of objects) {\n    for (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n      keys.add(key);\n    }\n  }\n  /* eslint-enable functional/no-loop-statement */\n\n\n  return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\n\n\nfunction objectHasProperty(object, property) {\n  return typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\n\n\nfunction getIterableOfIterables(iterables) {\n  return {\n    *[Symbol.iterator]() {\n      // eslint-disable-next-line functional/no-loop-statement\n      for (const iterable of iterables) {\n        // eslint-disable-next-line functional/no-loop-statement\n        for (const value of iterable) {\n          yield value;\n        }\n      }\n    }\n\n  };\n}\n\nconst defaultMergeFunctions = {\n  mergeMaps: defaultMergeMaps,\n  mergeSets: defaultMergeSets,\n  mergeArrays: defaultMergeArrays,\n  mergeRecords: defaultMergeRecords,\n  mergeOthers: leaf\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\n\nconst actions = {\n  defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n  skip: Symbol(\"deepmerge-ts: skip\")\n};\n/**\n * The default function to update meta data.\n */\n\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n  return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\n\n\nfunction deepmerge() {\n  return deepmergeCustom({})(...arguments);\n}\n\nfunction deepmergeCustom(options, rootMetaData) {\n  const utils = getUtils(options, customizedDeepmerge);\n  /**\n   * The customized deepmerge function.\n   */\n\n  function customizedDeepmerge() {\n    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n      objects[_key] = arguments[_key];\n    }\n\n    return mergeUnknowns(objects, utils, rootMetaData);\n  }\n\n  return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\n\n\nfunction getUtils(options, customizedDeepmerge) {\n  var _a, _b;\n\n  return {\n    defaultMergeFunctions,\n    mergeFunctions: { ...defaultMergeFunctions,\n      ...Object.fromEntries(Object.entries(options).filter(_ref => {\n        let [key, option] = _ref;\n        return Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key);\n      }).map(_ref2 => {\n        let [key, option] = _ref2;\n        return option === false ? [key, leaf] : [key, option];\n      }))\n    },\n    metaDataUpdater: (_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater,\n    deepmerge: customizedDeepmerge,\n    useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n    actions\n  };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\n\n\nfunction mergeUnknowns(values, utils, meta) {\n  if (values.length === 0) {\n    return undefined;\n  }\n\n  if (values.length === 1) {\n    return mergeOthers(values, utils, meta);\n  }\n\n  const type = getObjectType(values[0]); // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n\n  if (type !== 0\n  /* NOT */\n  && type !== 5\n  /* OTHER */\n  ) {\n    // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n    for (let mutableIndex = 1; mutableIndex < values.length; mutableIndex++) {\n      if (getObjectType(values[mutableIndex]) === type) {\n        continue;\n      }\n\n      return mergeOthers(values, utils, meta);\n    }\n  }\n\n  switch (type) {\n    case 1\n    /* RECORD */\n    :\n      return mergeRecords(values, utils, meta);\n\n    case 2\n    /* ARRAY */\n    :\n      return mergeArrays(values, utils, meta);\n\n    case 3\n    /* SET */\n    :\n      return mergeSets(values, utils, meta);\n\n    case 4\n    /* MAP */\n    :\n      return mergeMaps(values, utils, meta);\n\n    default:\n      return mergeOthers(values, utils, meta);\n  }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\n\n\nfunction mergeRecords(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords) {\n    return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n  }\n\n  return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction mergeArrays(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays) {\n    return utils.defaultMergeFunctions.mergeArrays(values);\n  }\n\n  return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction mergeSets(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets) {\n    return utils.defaultMergeFunctions.mergeSets(values);\n  }\n\n  return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction mergeMaps(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps) {\n    return utils.defaultMergeFunctions.mergeMaps(values);\n  }\n\n  return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\n\n\nfunction mergeOthers(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers) {\n    return utils.defaultMergeFunctions.mergeOthers(values);\n  }\n\n  return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\n\n\nfunction defaultMergeRecords(values, utils, meta) {\n  const result = {};\n  /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n\n  for (const key of getKeys(values)) {\n    const propValues = [];\n\n    for (const value of values) {\n      if (objectHasProperty(value, key)) {\n        propValues.push(value[key]);\n      }\n    } // assert(propValues.length > 0);\n\n\n    const updatedMeta = utils.metaDataUpdater(meta, {\n      key,\n      parents: values\n    });\n    const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\n    if (propertyResult === actions.skip) {\n      continue;\n    }\n\n    if (key === \"__proto__\") {\n      Object.defineProperty(result, key, {\n        value: propertyResult,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      });\n    } else {\n      result[key] = propertyResult;\n    }\n  }\n  /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n\n\n  return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction defaultMergeArrays(values) {\n  return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction defaultMergeSets(values) {\n  return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction defaultMergeMaps(values) {\n  return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\n\n\nfunction leaf(values) {\n  return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };","map":{"version":3,"sources":["/Users/shelvymurphy-brown/Desktop/spotify-react/client/node_modules/deepmerge-ts/dist/node/index.mjs"],"names":["isPlainObject","getObjectType","object","Array","isArray","Set","Map","getKeys","objects","keys","key","Object","getOwnPropertySymbols","add","objectHasProperty","property","prototype","propertyIsEnumerable","call","getIterableOfIterables","iterables","Symbol","iterator","iterable","value","defaultMergeFunctions","mergeMaps","defaultMergeMaps","mergeSets","defaultMergeSets","mergeArrays","defaultMergeArrays","mergeRecords","defaultMergeRecords","mergeOthers","leaf","actions","defaultMerge","skip","defaultMetaDataUpdater","previousMeta","metaMeta","deepmerge","deepmergeCustom","options","rootMetaData","utils","getUtils","customizedDeepmerge","mergeUnknowns","_a","_b","mergeFunctions","fromEntries","entries","filter","option","hasOwnProperty","map","metaDataUpdater","useImplicitDefaultMerging","enableImplicitDefaultMerging","values","meta","length","undefined","type","mutableIndex","result","propValues","push","updatedMeta","parents","propertyResult","defineProperty","configurable","enumerable","writable","flat"],"mappings":"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","sourcesContent":["import { isPlainObject } from 'is-plain-object';\n\n/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n    if (typeof object !== \"object\" || object === null) {\n        return 0 /* NOT */;\n    }\n    if (Array.isArray(object)) {\n        return 2 /* ARRAY */;\n    }\n    if (isPlainObject(object)) {\n        return 1 /* RECORD */;\n    }\n    if (object instanceof Set) {\n        return 3 /* SET */;\n    }\n    if (object instanceof Map) {\n        return 4 /* MAP */;\n    }\n    return 5 /* OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n    const keys = new Set();\n    /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n    for (const object of objects) {\n        for (const key of [\n            ...Object.keys(object),\n            ...Object.getOwnPropertySymbols(object),\n        ]) {\n            keys.add(key);\n        }\n    }\n    /* eslint-enable functional/no-loop-statement */\n    return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n    return (typeof object === \"object\" &&\n        Object.prototype.propertyIsEnumerable.call(object, property));\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n    return {\n        *[Symbol.iterator]() {\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const iterable of iterables) {\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const value of iterable) {\n                    yield value;\n                }\n            }\n        },\n    };\n}\n\nconst defaultMergeFunctions = {\n    mergeMaps: defaultMergeMaps,\n    mergeSets: defaultMergeSets,\n    mergeArrays: defaultMergeArrays,\n    mergeRecords: defaultMergeRecords,\n    mergeOthers: leaf,\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\nconst actions = {\n    defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n    skip: Symbol(\"deepmerge-ts: skip\"),\n};\n/**\n * The default function to update meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n    return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge(...objects) {\n    return deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n    const utils = getUtils(options, customizedDeepmerge);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmerge(...objects) {\n        return mergeUnknowns(objects, utils, rootMetaData);\n    }\n    return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n    var _a, _b;\n    return {\n        defaultMergeFunctions,\n        mergeFunctions: {\n            ...defaultMergeFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key))\n                .map(([key, option]) => option === false ? [key, leaf] : [key, option])),\n        },\n        metaDataUpdater: ((_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater),\n        deepmerge: customizedDeepmerge,\n        useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n        actions,\n    };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n    if (values.length === 0) {\n        return undefined;\n    }\n    if (values.length === 1) {\n        return mergeOthers(values, utils, meta);\n    }\n    const type = getObjectType(values[0]);\n    // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n    if (type !== 0 /* NOT */ && type !== 5 /* OTHER */) {\n        // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n        for (let mutableIndex = 1; mutableIndex < values.length; mutableIndex++) {\n            if (getObjectType(values[mutableIndex]) === type) {\n                continue;\n            }\n            return mergeOthers(values, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* RECORD */:\n            return mergeRecords(values, utils, meta);\n        case 2 /* ARRAY */:\n            return mergeArrays(values, utils, meta);\n        case 3 /* SET */:\n            return mergeSets(values, utils, meta);\n        case 4 /* MAP */:\n            return mergeMaps(values, utils, meta);\n        default:\n            return mergeOthers(values, utils, meta);\n    }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeRecords !==\n                utils.defaultMergeFunctions.mergeRecords)) {\n        return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n    }\n    return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeArrays !==\n                utils.defaultMergeFunctions.mergeArrays)) {\n        return utils.defaultMergeFunctions.mergeArrays(values);\n    }\n    return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)) {\n        return utils.defaultMergeFunctions.mergeSets(values);\n    }\n    return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)) {\n        return utils.defaultMergeFunctions.mergeMaps(values);\n    }\n    return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeOthers !==\n                utils.defaultMergeFunctions.mergeOthers)) {\n        return utils.defaultMergeFunctions.mergeOthers(values);\n    }\n    return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction defaultMergeRecords(values, utils, meta) {\n    const result = {};\n    /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        // assert(propValues.length > 0);\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n        if (propertyResult === actions.skip) {\n            continue;\n        }\n        if (key === \"__proto__\") {\n            Object.defineProperty(result, key, {\n                value: propertyResult,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            result[key] = propertyResult;\n        }\n    }\n    /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n    return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction defaultMergeArrays(values) {\n    return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction defaultMergeSets(values) {\n    return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction defaultMergeMaps(values) {\n    return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction leaf(values) {\n    return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };\n"]},"metadata":{},"sourceType":"module"}