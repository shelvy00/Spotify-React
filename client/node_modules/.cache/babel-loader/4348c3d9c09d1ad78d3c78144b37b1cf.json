{"ast":null,"code":"var _jsxFileName = \"/Users/shelvymurphy-brown/Desktop/spotify-react/client/src/components/Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from \"./useAuth\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport TrackSearchResult from './TrackSearchResult';\nimport PlaySong from './PlaySong';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"06466eddfb64409d9c23ab34d3fa8a21\"\n});\n\nfunction Dashboard(_ref) {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playTrack, setPlayTrack] = useState([]);\n  console.log(searchResults);\n\n  function pickedTrack(track) {\n    setPlayTrack(track);\n    setSearch(\"\");\n  }\n\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        pickedTrack: pickedTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PlaySong, {\n        accessToken: accessToken,\n        trackUri: playTrack === null || playTrack === void 0 ? void 0 : playTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Dashboard, \"vtjm6AatT8zwuItcAOBWsJag2vM=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/shelvymurphy-brown/Desktop/spotify-react/client/src/components/Dashboard.js"],"names":["React","useState","useEffect","useAuth","Container","Form","SpotifyWebApi","TrackSearchResult","PlaySong","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playTrack","setPlayTrack","console","log","pickedTrack","track","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport useAuth from \"./useAuth\"\nimport { Container, Form } from \"react-bootstrap\"\nimport SpotifyWebApi from 'spotify-web-api-node'\nimport TrackSearchResult from './TrackSearchResult'\nimport PlaySong from './PlaySong'\n\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"06466eddfb64409d9c23ab34d3fa8a21\",\n})\n\nfunction Dashboard({ code}) {\n    const accessToken = useAuth(code)\n    const [search, setSearch] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([])\n    const [playTrack, setPlayTrack] = useState([])\n    console.log(searchResults)\n\n    function pickedTrack(track) {\n      setPlayTrack(track)\n      setSearch(\"\")\n    }\n\n   useEffect(() =>{\n      if (!accessToken) return\n      spotifyApi.setAccessToken(accessToken)\n   }, [accessToken])\n\n   useEffect(() => {\n      if (!search) return setSearchResults([])\n      if (!accessToken) return\n      \n      let cancel = false\n      spotifyApi.searchTracks(search).then(res => {\n        if (cancel) return\n        setSearchResults(res.body.tracks.items.map(track => {\n          const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n            if (image.height < smallest.height) return image\n            return smallest\n          }, track.album.images[0])\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url\n          }\n        }))\n      })\n\n      return () => cancel = true\n   }, [search, accessToken])\n\n\n  return (\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n      <Form.Control \n        type=\"search\"\n        placeholder=\"Search Songs/Artists\"\n        value={search}\n        onChange={e => setSearch(e.target.value)}\n      />\n      <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n        {searchResults.map((track) => (\n          <TrackSearchResult track={track} key={track.uri} pickedTrack={pickedTrack} />\n        ))}\n      </div>\n      <div><PlaySong accessToken={accessToken} trackUri={playTrack?.uri} /></div>\n    </Container>\n  )\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}